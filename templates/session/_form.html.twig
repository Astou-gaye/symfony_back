{{ form_start(form, {'attr': {'class': 'needs-validation', 'novalidate': true}}) }}

<div class="row g-4">
  <!-- Date de début -->
  <div class="col-md-6">
    <div class="form-group">
      <label class="form-label fw-semibold text-dark mb-2">
        <i class="bx bx-calendar text-primary me-1"></i>
        Date de début <span class="text-danger">*</span>
      </label>
      {{ form_widget(form.dateDebut, {
        'attr': {
          'class': 'form-control form-control-lg border-0 bg-light rounded-3',
          'required': true
        }
      }) }}
      <div class="form-text text-muted">
        <i class="bx bx-info-circle me-1"></i>
        Date de commencement de la session
      </div>
      <div class="invalid-feedback">
        Veuillez saisir une date de début valide.
      </div>
    </div>
  </div>

  <!-- Date de fin -->
  <div class="col-md-6">
    <div class="form-group">
      <label class="form-label fw-semibold text-dark mb-2">
        <i class="bx bx-calendar-check text-primary me-1"></i>
        Date de fin <span class="text-danger">*</span>
      </label>
      {{ form_widget(form.dateFin, {
        'attr': {
          'class': 'form-control form-control-lg border-0 bg-light rounded-3',
          'required': true
        }
      }) }}
      <div class="form-text text-muted">
        <i class="bx bx-info-circle me-1"></i>
        Date de fin de la session
      </div>
      <div class="invalid-feedback">
        Veuillez saisir une date de fin valide.
      </div>
    </div>
  </div>

  <!-- Voyage associé (si applicable) -->
  {% if form.voyage is defined %}
  <div class="col-12">
    <div class="form-group">
      <label class="form-label fw-semibold text-dark mb-2">
        <i class="bx bx-map-marked-alt text-primary me-1"></i>
        Voyage associé <span class="text-danger">*</span>
      </label>
      {{ form_widget(form.voyage, {
        'attr': {
          'class': 'form-select form-select-lg border-0 bg-light rounded-3',
          'required': true
        }
      }) }}
      <div class="form-text text-muted">
        <i class="bx bx-info-circle me-1"></i>
        Sélectionnez le voyage pour cette session
      </div>
      <div class="invalid-feedback">
        Veuillez sélectionner un voyage.
      </div>
    </div>
  </div>
  {% endif %}

  <!-- Capacité (si applicable) -->
  {% if form.capacite is defined %}
  <div class="col-md-6">
    <div class="form-group">
      <label class="form-label fw-semibold text-dark mb-2">
        <i class="bx bx-users text-primary me-1"></i>
        Capacité <span class="text-danger">*</span>
      </label>
      {{ form_widget(form.capacite, {
        'attr': {
          'class': 'form-control form-control-lg border-0 bg-light rounded-3',
          'placeholder': 'Nombre de places disponibles',
          'min': 1,
          'required': true
        }
      }) }}
      <div class="form-text text-muted">
        <i class="bx bx-info-circle me-1"></i>
        Nombre maximum de participants
      </div>
      <div class="invalid-feedback">
        Veuillez saisir une capacité valide.
      </div>
    </div>
  </div>
  {% endif %}

  <!-- Prix (si applicable) -->
  {% if form.prix is defined %}
  <div class="col-md-6">
    <div class="form-group">
      <label class="form-label fw-semibold text-dark mb-2">
        <i class="bx bx-money text-primary me-1"></i>
        Prix <span class="text-danger">*</span>
      </label>
      <div class="input-group">
        {{ form_widget(form.prix, {
          'attr': {
            'class': 'form-control form-control-lg border-0 bg-light',
            'placeholder': '0.00',
            'min': 0,
            'step': '0.01',
            'required': true
          }
        }) }}
        <span class="input-group-text bg-light border-0 text-muted">FCFA</span>
      </div>
      <div class="form-text text-muted">
        <i class="bx bx-info-circle me-1"></i>
        Prix par participant en FCFA
      </div>
      <div class="invalid-feedback">
        Veuillez saisir un prix valide.
      </div>
    </div>
  </div>
  {% endif %}

  <!-- Statut (si applicable) -->
  {% if form.statut is defined %}
  <div class="col-12">
    <div class="form-group">
      <label class="form-label fw-semibold text-dark mb-2">
        <i class="bx bx-check-circle text-primary me-1"></i>
        Statut <span class="text-danger">*</span>
      </label>
      {{ form_widget(form.statut, {
        'attr': {
          'class': 'form-select form-select-lg border-0 bg-light rounded-3',
          'required': true
        }
      }) }}
      <div class="form-text text-muted">
        <i class="bx bx-info-circle me-1"></i>
        État actuel de la session
      </div>
      <div class="invalid-feedback">
        Veuillez sélectionner un statut.
      </div>
    </div>
  </div>
  {% endif %}

  <!-- Description/Notes (si applicable) -->
  {% if form.notes is defined %}
  <div class="col-12">
    <div class="form-group">
      <label class="form-label fw-semibold text-dark mb-2">
        <i class="bx bx-note text-primary me-1"></i>
        Notes
      </label>
      {{ form_widget(form.notes, {
        'attr': {
          'class': 'form-control form-control-lg border-0 bg-light rounded-3',
          'placeholder': 'Notes ou commentaires sur cette session...',
          'rows': 4
        }
      }) }}
      <div class="form-text text-muted">
        <i class="bx bx-info-circle me-1"></i>
        Informations complémentaires (optionnel)
      </div>
    </div>
  </div>
  {% endif %}

  <!-- Autres champs du formulaire (rendu automatique) -->
  {% for field in form %}
    {% if field.vars.name not in ['dateDebut', 'dateFin', 'voyage', 'capacite', 'prix', 'statut', 'notes', '_token'] %}
      <div class="col-12">
        <div class="form-group">
          {{ form_label(field, null, {'label_attr': {'class': 'form-label fw-semibold text-dark mb-2'}}) }}
          {{ form_widget(field, {
            'attr': {
              'class': 'form-control form-control-lg border-0 bg-light rounded-3'
            }
          }) }}
          {% if form_errors(field) %}
            <div class="invalid-feedback d-block">
              {{ form_errors(field) }}
            </div>
          {% endif %}
        </div>
      </div>
    {% endif %}
  {% endfor %}
</div>

<!-- Boutons d'action -->
<div class="row mt-5 pt-4 border-top">
  <div class="col-12">
    <div class="d-flex justify-content-between align-items-center">
      <div class="text-muted small">
        <i class="bx bx-info-circle me-1"></i>
        Les champs marqués d'un <span class="text-danger">*</span> sont obligatoires
      </div>
      <div class="d-flex gap-2">
        <a href="{{ path('app_session_index') }}" 
           class="btn btn-outline-secondary rounded-3 px-4 py-2 fw-semibold">
          <i class="bx bx-x me-2"></i>Annuler
        </a>
        <button type="submit" class="btn btn-primary shadow-sm rounded-3 px-4 py-2 fw-semibold">
          <i class="bx bx-check me-2"></i>
          {{ button_label|default('Créer la session') }}
        </button>
      </div>
    </div>
  </div>
</div>

{{ form_end(form) }}

<script>
// Validation en temps réel
document.addEventListener('DOMContentLoaded', function() {
  const forms = document.querySelectorAll('.needs-validation');
  
  Array.from(forms).forEach(form => {
    form.addEventListener('submit', event => {
      if (!form.checkValidity()) {
        event.preventDefault();
        event.stopPropagation();
      }
      form.classList.add('was-validated');
    }, false);
  });

  // Validation des dates (début < fin)
  const dateDebut = document.querySelector('input[name*="dateDebut"]');
  const dateFin = document.querySelector('input[name*="dateFin"]');
  
  if (dateDebut && dateFin) {
    function validateDates() {
      if (dateDebut.value && dateFin.value) {
        const debut = new Date(dateDebut.value);
        const fin = new Date(dateFin.value);
        
        if (debut >= fin) {
          dateFin.setCustomValidity('La date de fin doit être postérieure à la date de début');
        } else {
          dateFin.setCustomValidity('');
        }
      }
    }
    
    dateDebut.addEventListener('change', validateDates);
    dateFin.addEventListener('change', validateDates);
  }
});
</script>